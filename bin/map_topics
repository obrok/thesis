#!/usr/bin/python

import sys
import codecs
import operator
import math
sys.path += ":.."

from gensim import models
from thesis.model.lsa_model import ModelWrapper, best_of

filename = sys.argv[1]
model_name = sys.argv[2]

query = 423
gold = [423, 515, 9927, 11188, 8778, 5661, 468, 5854, 10676, 7319, 7871, 12192]

def score(gold, actual):
  perfect = sum(map(lambda x: x * x, range(0, len(gold))))
  result = 0

  for item in gold:
    distance = operator.indexOf(actual, item)
    result += distance * distance

  return math.sqrt(result / float(perfect))

with codecs.open(filename, "r", "utf-8") as file:
  docs = file.read().rsplit("\n")
  docs = map(lambda d: d.split("|"), docs)

  for topics in range(1,10) + range(10, 100, 10) + range(100, 1000, 100) + range(1000, 2000, 200):
    best_of(docs, eval("models." + model_name), topics, 3)
    model = ModelWrapper(docs, eval("models." + model_name), topics)
    result = model.similar(docs[query])

    print "{0} {1}".format(topics, score(gold, result))
    sys.stdout.flush()
